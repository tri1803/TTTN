// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Temp.DataAccess.Data;

namespace Temp.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200304073927_updateTableProduct1")]
    partial class updateTableProduct1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Temp.DataAccess.Data.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount");

                    b.Property<int?>("Price");

                    b.Property<int>("ProductId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("ntext");

                    b.Property<int>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image1");

                    b.Property<string>("Image2");

                    b.Property<string>("Image3");

                    b.Property<string>("Image4");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Nsx", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Nsxs");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount");

                    b.Property<string>("Avatar");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Desc")
                        .HasColumnType("ntext");

                    b.Property<string>("Name");

                    b.Property<int>("NsxId");

                    b.Property<int?>("Price");

                    b.Property<int>("ProductType");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NsxId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("PriceNow");

                    b.Property<int?>("PriceOld");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("ExpiredDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone");

                    b.Property<int>("RoleId");

                    b.Property<int?>("Status");

                    b.Property<int?>("Type");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Temp.DataAccess.Data.CartDetail", b =>
                {
                    b.HasOne("Temp.DataAccess.Data.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Temp.DataAccess.Data.User", "User")
                        .WithMany("CartDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Comment", b =>
                {
                    b.HasOne("Temp.DataAccess.Data.Product", "Product")
                        .WithOne("Comment")
                        .HasForeignKey("Temp.DataAccess.Data.Comment", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Temp.DataAccess.Data.User", "User")
                        .WithOne("Comment")
                        .HasForeignKey("Temp.DataAccess.Data.Comment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Image", b =>
                {
                    b.HasOne("Temp.DataAccess.Data.Product", "Product")
                        .WithOne("Image")
                        .HasForeignKey("Temp.DataAccess.Data.Image", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Product", b =>
                {
                    b.HasOne("Temp.DataAccess.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Temp.DataAccess.Data.Nsx", "Nsx")
                        .WithMany("Products")
                        .HasForeignKey("NsxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Temp.DataAccess.Data.Sale", b =>
                {
                    b.HasOne("Temp.DataAccess.Data.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("Temp.DataAccess.Data.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Temp.DataAccess.Data.User", b =>
                {
                    b.HasOne("Temp.DataAccess.Data.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
